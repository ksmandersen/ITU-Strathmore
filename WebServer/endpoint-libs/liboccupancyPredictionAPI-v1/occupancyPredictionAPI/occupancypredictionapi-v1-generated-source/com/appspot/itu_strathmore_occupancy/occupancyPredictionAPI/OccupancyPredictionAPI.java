/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-11-22 19:59:01 UTC)
 * on 2013-12-06 at 11:55:41 UTC 
 * Modify at your own risk.
 */

package com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI;

/**
 * Service definition for OccupancyPredictionAPI (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link OccupancyPredictionAPIRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class OccupancyPredictionAPI extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.16.0-rc of the occupancyPredictionAPI library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://itu-strathmore-occupancy.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "occupancyPredictionAPI/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public OccupancyPredictionAPI(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  OccupancyPredictionAPI(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "addObservations".
   *
   * This request holds the parameters needed by the the occupancyPredictionAPI server.  After setting
   * any optional parameters, call the {@link AddObservations#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.ObservationListContainer}
   * @return the request
   */
  public AddObservations addObservations(com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.ObservationListContainer content) throws java.io.IOException {
    AddObservations result = new AddObservations(content);
    initialize(result);
    return result;
  }

  public class AddObservations extends OccupancyPredictionAPIRequest<com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.ObservationCollection> {

    private static final String REST_PATH = "add_observations";

    /**
     * Create a request for the method "addObservations".
     *
     * This request holds the parameters needed by the the occupancyPredictionAPI server.  After
     * setting any optional parameters, call the {@link AddObservations#execute()} method to invoke
     * the remote operation. <p> {@link AddObservations#initialize(com.google.api.client.googleapis.se
     * rvices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.ObservationListContainer}
     * @since 1.13
     */
    protected AddObservations(com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.ObservationListContainer content) {
      super(OccupancyPredictionAPI.this, "POST", REST_PATH, content, com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.ObservationCollection.class);
    }

    @Override
    public AddObservations setAlt(java.lang.String alt) {
      return (AddObservations) super.setAlt(alt);
    }

    @Override
    public AddObservations setFields(java.lang.String fields) {
      return (AddObservations) super.setFields(fields);
    }

    @Override
    public AddObservations setKey(java.lang.String key) {
      return (AddObservations) super.setKey(key);
    }

    @Override
    public AddObservations setOauthToken(java.lang.String oauthToken) {
      return (AddObservations) super.setOauthToken(oauthToken);
    }

    @Override
    public AddObservations setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddObservations) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddObservations setQuotaUser(java.lang.String quotaUser) {
      return (AddObservations) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddObservations setUserIp(java.lang.String userIp) {
      return (AddObservations) super.setUserIp(userIp);
    }

    @Override
    public AddObservations set(String parameterName, Object value) {
      return (AddObservations) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getProbability".
   *
   * This request holds the parameters needed by the the occupancyPredictionAPI server.  After setting
   * any optional parameters, call the {@link GetProbability#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public GetProbability getProbability() throws java.io.IOException {
    GetProbability result = new GetProbability();
    initialize(result);
    return result;
  }

  public class GetProbability extends OccupancyPredictionAPIRequest<com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.CollectionResponseProbability> {

    private static final String REST_PATH = "probability";

    /**
     * Create a request for the method "getProbability".
     *
     * This request holds the parameters needed by the the occupancyPredictionAPI server.  After
     * setting any optional parameters, call the {@link GetProbability#execute()} method to invoke the
     * remote operation. <p> {@link GetProbability#initialize(com.google.api.client.googleapis.service
     * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected GetProbability() {
      super(OccupancyPredictionAPI.this, "GET", REST_PATH, null, com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.CollectionResponseProbability.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetProbability setAlt(java.lang.String alt) {
      return (GetProbability) super.setAlt(alt);
    }

    @Override
    public GetProbability setFields(java.lang.String fields) {
      return (GetProbability) super.setFields(fields);
    }

    @Override
    public GetProbability setKey(java.lang.String key) {
      return (GetProbability) super.setKey(key);
    }

    @Override
    public GetProbability setOauthToken(java.lang.String oauthToken) {
      return (GetProbability) super.setOauthToken(oauthToken);
    }

    @Override
    public GetProbability setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetProbability) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetProbability setQuotaUser(java.lang.String quotaUser) {
      return (GetProbability) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetProbability setUserIp(java.lang.String userIp) {
      return (GetProbability) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer timeOfDay;

    /**

     */
    public java.lang.Integer getTimeOfDay() {
      return timeOfDay;
    }

    public GetProbability setTimeOfDay(java.lang.Integer timeOfDay) {
      this.timeOfDay = timeOfDay;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String dayOfTheWeek;

    /**

     */
    public java.lang.String getDayOfTheWeek() {
      return dayOfTheWeek;
    }

    public GetProbability setDayOfTheWeek(java.lang.String dayOfTheWeek) {
      this.dayOfTheWeek = dayOfTheWeek;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String camera;

    /**

     */
    public java.lang.String getCamera() {
      return camera;
    }

    public GetProbability setCamera(java.lang.String camera) {
      this.camera = camera;
      return this;
    }

    @Override
    public GetProbability set(String parameterName, Object value) {
      return (GetProbability) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertObservation".
   *
   * This request holds the parameters needed by the the occupancyPredictionAPI server.  After setting
   * any optional parameters, call the {@link InsertObservation#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.Observation}
   * @return the request
   */
  public InsertObservation insertObservation(com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.Observation content) throws java.io.IOException {
    InsertObservation result = new InsertObservation(content);
    initialize(result);
    return result;
  }

  public class InsertObservation extends OccupancyPredictionAPIRequest<com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.Observation> {

    private static final String REST_PATH = "observation";

    /**
     * Create a request for the method "insertObservation".
     *
     * This request holds the parameters needed by the the occupancyPredictionAPI server.  After
     * setting any optional parameters, call the {@link InsertObservation#execute()} method to invoke
     * the remote operation. <p> {@link InsertObservation#initialize(com.google.api.client.googleapis.
     * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.Observation}
     * @since 1.13
     */
    protected InsertObservation(com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.Observation content) {
      super(OccupancyPredictionAPI.this, "POST", REST_PATH, content, com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.Observation.class);
    }

    @Override
    public InsertObservation setAlt(java.lang.String alt) {
      return (InsertObservation) super.setAlt(alt);
    }

    @Override
    public InsertObservation setFields(java.lang.String fields) {
      return (InsertObservation) super.setFields(fields);
    }

    @Override
    public InsertObservation setKey(java.lang.String key) {
      return (InsertObservation) super.setKey(key);
    }

    @Override
    public InsertObservation setOauthToken(java.lang.String oauthToken) {
      return (InsertObservation) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertObservation setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertObservation) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertObservation setQuotaUser(java.lang.String quotaUser) {
      return (InsertObservation) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertObservation setUserIp(java.lang.String userIp) {
      return (InsertObservation) super.setUserIp(userIp);
    }

    @Override
    public InsertObservation set(String parameterName, Object value) {
      return (InsertObservation) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "latestImage".
   *
   * This request holds the parameters needed by the the occupancyPredictionAPI server.  After setting
   * any optional parameters, call the {@link LatestImage#execute()} method to invoke the remote
   * operation.
   *
   * @param camera
   * @return the request
   */
  public LatestImage latestImage(java.lang.String camera) throws java.io.IOException {
    LatestImage result = new LatestImage(camera);
    initialize(result);
    return result;
  }

  public class LatestImage extends OccupancyPredictionAPIRequest<com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.Image> {

    private static final String REST_PATH = "latestImage/{camera}";

    /**
     * Create a request for the method "latestImage".
     *
     * This request holds the parameters needed by the the occupancyPredictionAPI server.  After
     * setting any optional parameters, call the {@link LatestImage#execute()} method to invoke the
     * remote operation. <p> {@link
     * LatestImage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param camera
     * @since 1.13
     */
    protected LatestImage(java.lang.String camera) {
      super(OccupancyPredictionAPI.this, "GET", REST_PATH, null, com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.Image.class);
      this.camera = com.google.api.client.util.Preconditions.checkNotNull(camera, "Required parameter camera must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public LatestImage setAlt(java.lang.String alt) {
      return (LatestImage) super.setAlt(alt);
    }

    @Override
    public LatestImage setFields(java.lang.String fields) {
      return (LatestImage) super.setFields(fields);
    }

    @Override
    public LatestImage setKey(java.lang.String key) {
      return (LatestImage) super.setKey(key);
    }

    @Override
    public LatestImage setOauthToken(java.lang.String oauthToken) {
      return (LatestImage) super.setOauthToken(oauthToken);
    }

    @Override
    public LatestImage setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (LatestImage) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public LatestImage setQuotaUser(java.lang.String quotaUser) {
      return (LatestImage) super.setQuotaUser(quotaUser);
    }

    @Override
    public LatestImage setUserIp(java.lang.String userIp) {
      return (LatestImage) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String camera;

    /**

     */
    public java.lang.String getCamera() {
      return camera;
    }

    public LatestImage setCamera(java.lang.String camera) {
      this.camera = camera;
      return this;
    }

    @Override
    public LatestImage set(String parameterName, Object value) {
      return (LatestImage) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listAllProbabilities".
   *
   * This request holds the parameters needed by the the occupancyPredictionAPI server.  After setting
   * any optional parameters, call the {@link ListAllProbabilities#execute()} method to invoke the
   * remote operation.
   *
   * @param camera
   * @return the request
   */
  public ListAllProbabilities listAllProbabilities(java.lang.String camera) throws java.io.IOException {
    ListAllProbabilities result = new ListAllProbabilities(camera);
    initialize(result);
    return result;
  }

  public class ListAllProbabilities extends OccupancyPredictionAPIRequest<com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.CollectionResponseProbabilityContainer> {

    private static final String REST_PATH = "all_probabilities";

    /**
     * Create a request for the method "listAllProbabilities".
     *
     * This request holds the parameters needed by the the occupancyPredictionAPI server.  After
     * setting any optional parameters, call the {@link ListAllProbabilities#execute()} method to
     * invoke the remote operation. <p> {@link ListAllProbabilities#initialize(com.google.api.client.g
     * oogleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param camera
     * @since 1.13
     */
    protected ListAllProbabilities(java.lang.String camera) {
      super(OccupancyPredictionAPI.this, "GET", REST_PATH, null, com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.CollectionResponseProbabilityContainer.class);
      this.camera = com.google.api.client.util.Preconditions.checkNotNull(camera, "Required parameter camera must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListAllProbabilities setAlt(java.lang.String alt) {
      return (ListAllProbabilities) super.setAlt(alt);
    }

    @Override
    public ListAllProbabilities setFields(java.lang.String fields) {
      return (ListAllProbabilities) super.setFields(fields);
    }

    @Override
    public ListAllProbabilities setKey(java.lang.String key) {
      return (ListAllProbabilities) super.setKey(key);
    }

    @Override
    public ListAllProbabilities setOauthToken(java.lang.String oauthToken) {
      return (ListAllProbabilities) super.setOauthToken(oauthToken);
    }

    @Override
    public ListAllProbabilities setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListAllProbabilities) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListAllProbabilities setQuotaUser(java.lang.String quotaUser) {
      return (ListAllProbabilities) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListAllProbabilities setUserIp(java.lang.String userIp) {
      return (ListAllProbabilities) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String camera;

    /**

     */
    public java.lang.String getCamera() {
      return camera;
    }

    public ListAllProbabilities setCamera(java.lang.String camera) {
      this.camera = camera;
      return this;
    }

    @Override
    public ListAllProbabilities set(String parameterName, Object value) {
      return (ListAllProbabilities) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listObservations".
   *
   * This request holds the parameters needed by the the occupancyPredictionAPI server.  After setting
   * any optional parameters, call the {@link ListObservations#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListObservations listObservations() throws java.io.IOException {
    ListObservations result = new ListObservations();
    initialize(result);
    return result;
  }

  public class ListObservations extends OccupancyPredictionAPIRequest<com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.CollectionResponseObservation> {

    private static final String REST_PATH = "observations";

    /**
     * Create a request for the method "listObservations".
     *
     * This request holds the parameters needed by the the occupancyPredictionAPI server.  After
     * setting any optional parameters, call the {@link ListObservations#execute()} method to invoke
     * the remote operation. <p> {@link ListObservations#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListObservations() {
      super(OccupancyPredictionAPI.this, "GET", REST_PATH, null, com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.CollectionResponseObservation.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListObservations setAlt(java.lang.String alt) {
      return (ListObservations) super.setAlt(alt);
    }

    @Override
    public ListObservations setFields(java.lang.String fields) {
      return (ListObservations) super.setFields(fields);
    }

    @Override
    public ListObservations setKey(java.lang.String key) {
      return (ListObservations) super.setKey(key);
    }

    @Override
    public ListObservations setOauthToken(java.lang.String oauthToken) {
      return (ListObservations) super.setOauthToken(oauthToken);
    }

    @Override
    public ListObservations setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListObservations) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListObservations setQuotaUser(java.lang.String quotaUser) {
      return (ListObservations) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListObservations setUserIp(java.lang.String userIp) {
      return (ListObservations) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private com.google.api.client.util.DateTime to;

    /**

     */
    public com.google.api.client.util.DateTime getTo() {
      return to;
    }

    public ListObservations setTo(com.google.api.client.util.DateTime to) {
      this.to = to;
      return this;
    }

    @com.google.api.client.util.Key
    private com.google.api.client.util.DateTime from;

    /**

     */
    public com.google.api.client.util.DateTime getFrom() {
      return from;
    }

    public ListObservations setFrom(com.google.api.client.util.DateTime from) {
      this.from = from;
      return this;
    }

    @Override
    public ListObservations set(String parameterName, Object value) {
      return (ListObservations) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "uploadUrl".
   *
   * This request holds the parameters needed by the the occupancyPredictionAPI server.  After setting
   * any optional parameters, call the {@link UploadUrl#execute()} method to invoke the remote
   * operation.
   *
   * @param camera
   * @param date
   * @return the request
   */
  public UploadUrl uploadUrl(java.lang.String camera, java.lang.String date) throws java.io.IOException {
    UploadUrl result = new UploadUrl(camera, date);
    initialize(result);
    return result;
  }

  public class UploadUrl extends OccupancyPredictionAPIRequest<com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.UploadUrl> {

    private static final String REST_PATH = "images/upload_url";

    /**
     * Create a request for the method "uploadUrl".
     *
     * This request holds the parameters needed by the the occupancyPredictionAPI server.  After
     * setting any optional parameters, call the {@link UploadUrl#execute()} method to invoke the
     * remote operation. <p> {@link
     * UploadUrl#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param camera
     * @param date
     * @since 1.13
     */
    protected UploadUrl(java.lang.String camera, java.lang.String date) {
      super(OccupancyPredictionAPI.this, "GET", REST_PATH, null, com.appspot.itu_strathmore_occupancy.occupancyPredictionAPI.model.UploadUrl.class);
      this.camera = com.google.api.client.util.Preconditions.checkNotNull(camera, "Required parameter camera must be specified.");
      this.date = com.google.api.client.util.Preconditions.checkNotNull(date, "Required parameter date must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public UploadUrl setAlt(java.lang.String alt) {
      return (UploadUrl) super.setAlt(alt);
    }

    @Override
    public UploadUrl setFields(java.lang.String fields) {
      return (UploadUrl) super.setFields(fields);
    }

    @Override
    public UploadUrl setKey(java.lang.String key) {
      return (UploadUrl) super.setKey(key);
    }

    @Override
    public UploadUrl setOauthToken(java.lang.String oauthToken) {
      return (UploadUrl) super.setOauthToken(oauthToken);
    }

    @Override
    public UploadUrl setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UploadUrl) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UploadUrl setQuotaUser(java.lang.String quotaUser) {
      return (UploadUrl) super.setQuotaUser(quotaUser);
    }

    @Override
    public UploadUrl setUserIp(java.lang.String userIp) {
      return (UploadUrl) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String camera;

    /**

     */
    public java.lang.String getCamera() {
      return camera;
    }

    public UploadUrl setCamera(java.lang.String camera) {
      this.camera = camera;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String date;

    /**

     */
    public java.lang.String getDate() {
      return date;
    }

    public UploadUrl setDate(java.lang.String date) {
      this.date = date;
      return this;
    }

    @Override
    public UploadUrl set(String parameterName, Object value) {
      return (UploadUrl) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link OccupancyPredictionAPI}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link OccupancyPredictionAPI}. */
    @Override
    public OccupancyPredictionAPI build() {
      return new OccupancyPredictionAPI(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link OccupancyPredictionAPIRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setOccupancyPredictionAPIRequestInitializer(
        OccupancyPredictionAPIRequestInitializer occupancypredictionapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(occupancypredictionapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
